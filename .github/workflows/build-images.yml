name: Build webhook images
run-name: build-webhook-images
on:
  push:
    branches:
      - "github_actions_test"
jobs:
  build-test-images:
    name: Build test images
    runs-on: ubuntu-latest

    steps:
      - id: checkout_repo
        name: Checkout repo
        uses: actions/checkout@v3

      - id: set_build_image_tags
        name: Set build image tags
        run: |
          echo "REGISTRYPATH=$(echo "ghcr.io/${{ github.repository }}")" >> $GITHUB_OUTPUT
          echo "UBUNTUNAME=$(echo webhook-ubuntu)" >> $GITHUB_OUTPUT
          echo "TAG=$(echo "actionstest")" >> $GITHUB_OUTPUT
          echo "UBUNTUARTIFACTPATH=$(echo "/tmp/ubuntu_webhook_test_image.tar")" >> $GITHUB_OUTPUT
          echo "PACKAGEVERSION=$(cat ${{ github.workspace }}/VERSION)" >> $GITHUB_OUTPUT

      - id: set_full_image_names
        name: Set full image names
        run: |
          #echo "UBUNTUIMAGE=$(echo "${{steps.set_build_image_tags.outputs.REGISTRYPATH}}/${{steps.set_build_image_tags.outputs.UBUNTUNAME}}:${{ steps.set_build_image_tags.outputs.TAG }}")" >> $GITHUB_OUTPUT
          echo "UBUNTUIMAGE=$(echo "${{steps.set_build_image_tags.outputs.REGISTRYPATH}}/${{steps.set_build_image_tags.outputs.UBUNTUNAME}}")" >> $GITHUB_OUTPUT
          echo "UBUNTUSHORTIMAGE=$(echo "${{steps.set_build_image_tags.outputs.UBUNTUNAME}}")" >> $GITHUB_OUTPUT

      - id: ghcr_login
        name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Disabling due to:
      # https://github.com/docker/setup-buildx-action/issues/113
      # - id: setup_buildx
      #   name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - id: build_test_image_ubuntu
        name: Build Ubuntu test image
        uses: docker/build-push-action@v4.1.1
        with:
          context: ${{ github.workspace }}/Dockerfiles
          push: true
          file: Dockerfiles/Dockerfile.ubuntu
          tags: |
            ${{ steps.set_full_image_names.outputs.UBUNTUIMAGE }}:${{ steps.set_build_image_tags.outputs.TAG }}
            ${{ steps.set_full_image_names.outputs.UBUNTUIMAGE }}:${{ steps.set_build_image_tags.outputs.PACKAGEVERSION }}
      #     outputs: type=docker,dest=${{ steps.set_build_image_tags.outputs.UBUNTUARTIFACTPATH }}

      # - id: upload_ubuntu_test_image
      #   name: Upload Ubuntu test image
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ steps.set_build_image_tags.outputs.UBUNTUNAME }}
      #     path: ${{ steps.set_build_image_tags.outputs.UBUNTUARTIFACTPATH }}

    outputs:
      UBUNTUIMAGE: ${{ steps.set_full_image_names.outputs.UBUNTUIMAGE }}
      UBUNTUSHORTIMAGE: ${{ steps.set_full_image_names.outputs.UBUNTUSHORTIMAGE }}
      UBUNTUARTIFACTPATH: ${{ steps.set_build_image_tags.outputs.UBUNTUARTIFACTPATH }}
      UBUNTUNAME: ${{ steps.set_build_image_tags.outputs.UBUNTUNAME }}
      PUSHSUCCESS: ${{ steps.build_test_image_ubuntu.outcome }}
      REPOOWNER: ${{ github.repository_owner }}
      FULLREPONAME: ${{ github.repository }}
      SHORTREPONAME: ${{ github.event.repository.name }}
      PACKAGENAME: "${{ github.event.repository.name}}/${{ steps.set_build_image_tags.outputs.UBUNTUNAME }}"
      TAG: ${{ steps.set_build_image_tags.outputs.TAG }}
      PACKAGEVERSION: ${{ steps.set_build_image_tags.outputs.PACKAGEVERSION }}

  run-test-images:
    name: Run test images
    runs-on: ubuntu-latest
    needs: build-test-images
    env:
      UBUNTUIMAGE: ${{ needs.build-test-images.outputs.UBUNTUIMAGE }}
      UBUNTUSHORTIMAGE: ${{ needs.build-test-images.outputs.UBUNTUSHORTIMAGE }}
      UBUNTUARTIFACTPATH: ${{ needs.build-test-images.outputs.UBUNTUARTIFACTPATH }}
      UBUNTUNAME: ${{ needs.build-test-images.outputs.UBUNTUNAME }}
      REPOOWNER: ${{ needs.build-test-images.outputs.REPOOWNER }}
      SHORTREPONAME: ${{ needs.build-test-images.outputs.SHORTREPONAME }}

    services:
      ubuntu_test_image:
        image: ${{ needs.build-test-images.outputs.UBUNTUIMAGE }}
        ports:
          - 5572:9000
        options: --name ${{ needs.build-test-images.outputs.UBUNTUNAME }}-temp

    steps:

      - id: check_if_listening
        name: Check if the container is listening
        run: |
          # Make sure the container has had enough time to wake up and have coffee
          sleep 5
          CODE=$(curl -L -s -o /dev/null -w "%{http_code}" "http://localhost:5572/hooks/webhook")
          if [ $CODE -ne 200 ]; then
            echo "TESTRESULT=$(echo "failed")" >> $GITHUB_OUTPUT
          else
            echo "TESTRESULT=$(echo "listening")" >> $GITHUB_OUTPUT
          fi

      - id: fail_if_not_listening
        if: ${{ steps.check_if_listening.outputs.TESTRESULT != 'listening' }}
        name: Remove version release tag if failed
        # uses: actions/github-script@v6
        # with:
        #   script: |
        #     core.setFailed('Webhook container ${{ needs.build-test-images.outputs.UBUNTUNAME }} is not listening or did not return 200 OK')
        uses: chipkent/action-cleanup-package@v1.0.1
        with:
          package-name: "${{ needs.build-test-images.outputs.SHORTREPONAME }}%2F${{ needs.build-test-images.outputs.UBUNTUNAME }}"
          tag: ${{ needs.build-test-images.outputs.PACKAGEVERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # - id: download_test_images
      #   name: Download Ubuntu test image
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ubuntu_test_image
      #     path: ${{ needs.build-test-images.outputs.UBUNTUARTIFACTPATH }}

      # - id: import_ubuntu_test_image
      #   name: Import Ubuntu test image
      #   run: docker load -i $UBUNTUARTIFACTPATH

  cleanup:
    if: ${{ !cancelled() }}
    name: Delete artifacts
    runs-on: ubuntu-latest
    needs: [build-test-images, run-test-images]
    env:
      UBUNTUNAME: ${{ needs.build-test-images.outputs.UBUNTUNAME }}
      REPOOWNER: ${{ needs.build-test-images.outputs.REPOOWNER }}
      SHORTREPONAME: ${{ needs.build-test-images.outputs.SHORTREPONAME }}

    steps:
      - name: Debug
        run: |
          echo "Package name is: ${{ needs.build-test-images.outputs.PACKAGENAME }}"

      - id: cleanup_artifacts
        if: ${{ needs.build-test-images.outputs.PUSHSUCCESS == 'success' }}
        name: Delete Ubuntu test image
        run: |
          curl -L \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/users/${REPOOWNER}/packages/container/${SHORTREPONAME}%2F${UBUNTUNAME}